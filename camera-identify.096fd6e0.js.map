{"mappings":"A,M,mD,C,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,E,Q,C,I,E,E,S,E,S,E,SCIC,AAAA,CAAA,UACG,IAAM,EAAQ,SAAS,cAAc,CAAC,UAChC,EAAW,SAAS,cAAc,CAAC,aACnC,EAAW,SAAS,cAAc,CAAC,QACnC,EAAM,SAAS,cAAc,CAAC,cAC9B,EAAiB,SAAS,cAAc,CAAC,oBAE3C,EAA0B,EAAE,CAC5B,EAAwC,KAa5C,eAAe,EAAU,CAAiB,EACtC,GAAM,CAAA,OAAE,CAAM,CAAE,CAAG,EACnB,GAAI,aAAkB,YAClB,GAAI,CACA,EAAQ,MAAM,EAAd,IAAA,GACA,EAAO,SAAS,CAAC,GAAG,CAAC,UAErB,UAAU,YAAY,CAAC,YAAY,CADf,CAAE,MAAO,CAAA,CAAK,GACe,IAAI,CAAC,AAAC,IACnD,EAAM,SAAS,CAAG,EAClB,EAAM,YAAY,CAAG,CACzB,GACA,EAAe,SAAS,CAAC,GAAG,CAAC,SACjC,CAAE,MAAO,EAAO,CACZ,QAAQ,GAAG,CAAC,EAChB,CAER,CAEA,SAAS,IAEA,GAEL,EAAM,MAAM,CAAC,GAAO,IAAI,CAAC,AAAC,IACtB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAS,MAAM,CAAE,IACjC,EAAS,WAAW,CAAC,CAAQ,CAAC,EAAE,EAEpC,EAAS,MAAM,CAAC,GAGhB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAY,MAAM,CAAE,IAAK,CACzC,GAAI,CAAW,CAAC,EAAE,CAAC,KAAK,CA7CR,IA6CgC,SAGhD,IAAM,EAAI,SAAS,aAAa,CAAC,IACjC,CAAA,EAAE,SAAS,CACP,CAAW,CAAC,EAAE,CAAC,KAAK,CACpB,WACA,KAAK,KAAK,CAAC,AAAwC,IAAxC,WAAW,CAAA,EAAG,CAAW,CAAC,EAAE,CAAC,KAAK,CAAA,CAAE,GAC/C,gBACJ,EAAE,KAAK,CACH,gBACA,CAAW,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CACtB,mBACC,CAAA,CAAW,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAG,EAAA,EAC1B,cACC,CAAA,CAAW,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAG,EAAA,EAC1B,uBAEJ,IAAM,EAAc,SAAS,aAAa,CAAC,OAC3C,EAAY,YAAY,CAAC,QAAS,eAClC,EAAY,KAAK,CACb,SACA,CAAW,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CACtB,YACA,CAAW,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CACtB,cACA,CAAW,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CACtB,eACA,CAAW,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CACtB,MAEJ,EAAS,WAAW,CAAC,GACrB,EAAS,WAAW,CAAC,GACrB,EAAS,IAAI,CAAC,GACd,EAAS,IAAI,CAAC,EAClB,CAEA,OAAO,qBAAqB,CAAC,EACjC,EACJ,CAxEc,UAAU,YAAY,EAAI,UAAU,YAAY,CAAC,eAAc,EAPzE,EAAS,SAAS,CAAC,MAAM,CAAC,UAC1B,EAAI,gBAAgB,CAAC,QAAS,IAE9B,QAAQ,IAAI,CAAC,kDA6ErB,CAAA","sources":["<anon>","src/scripts/camera-identify.ts"],"sourcesContent":["import \"./camera-identify-p5.2aafa147.js\";\n\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequiread69\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequiread69\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\n\nvar $g73GA = parcelRequire(\"g73GA\");\nparcelRequire(\"iUyUN\");\nparcelRequire(\"5jdc5\");\n(async ()=>{\n    const video = document.getElementById('webcam');\n    const liveView = document.getElementById('live-view');\n    const demoArea = document.getElementById('demo');\n    const btn = document.getElementById('btn-enable');\n    const instructionBox = document.getElementById('instruction-area');\n    const confidenceThreshold = 0.66;\n    let children = [];\n    let model = null;\n    if (getSupportedMedia()) {\n        demoArea.classList.remove('hidden');\n        btn.addEventListener('click', enableCam);\n    } else console.warn('getUserMedia() is not supported by your browser');\n    function getSupportedMedia() {\n        return !!(navigator.mediaDevices && navigator.mediaDevices.getDisplayMedia);\n    }\n    async function enableCam(event) {\n        const { target: target } = event;\n        if (target instanceof HTMLElement) try {\n            model = await $g73GA.load();\n            target.classList.add('hidden');\n            const constraints = {\n                video: true\n            };\n            navigator.mediaDevices.getUserMedia(constraints).then((stream)=>{\n                video.srcObject = stream;\n                video.onloadeddata = predictWebCam;\n            });\n            instructionBox.classList.add('hidden');\n        } catch (error) {\n            console.log(error);\n        }\n    }\n    function predictWebCam() {\n        // remove previous bounding boxes\n        if (!model) return;\n        model.detect(video).then((predictions)=>{\n            for(let i = 0; i < children.length; i++)liveView.removeChild(children[i]);\n            children.splice(0);\n            // draw only if prediction has high confidence\n            for(let i = 0; i < predictions.length; i++){\n                if (predictions[i].score < confidenceThreshold) continue;\n                //draw\n                const p = document.createElement('p');\n                p.innerText = predictions[i].class + ' - with ' + Math.round(parseFloat(`${predictions[i].score}`) * 100) + '% confidence.';\n                p.style = 'margin-left: ' + predictions[i].bbox[0] + 'px; margin-top: ' + (predictions[i].bbox[1] - 10) + 'px; width: ' + (predictions[i].bbox[2] - 10) + 'px; top: 0; left: 0;';\n                const highlighter = document.createElement('div');\n                highlighter.setAttribute('class', 'highlighter');\n                highlighter.style = 'left: ' + predictions[i].bbox[0] + 'px; top: ' + predictions[i].bbox[1] + 'px; width: ' + predictions[i].bbox[2] + 'px; height: ' + predictions[i].bbox[3] + 'px;';\n                liveView.appendChild(highlighter);\n                liveView.appendChild(p);\n                children.push(highlighter);\n                children.push(p);\n            }\n            // Call this function again to keep predicting when the browser is ready.\n            window.requestAnimationFrame(predictWebCam);\n        });\n    }\n})();\n\n\n//# sourceMappingURL=camera-identify.096fd6e0.js.map\n","import * as cocoSSD from '@tensorflow-models/coco-ssd';\nimport '@tensorflow/tfjs-backend-cpu';\nimport '@tensorflow/tfjs-backend-webgl';\n\n(async () => {\n    const video = document.getElementById('webcam') as HTMLVideoElement;\n    const liveView = document.getElementById('live-view') as HTMLElement;\n    const demoArea = document.getElementById('demo') as HTMLElement;\n    const btn = document.getElementById('btn-enable') as HTMLButtonElement;\n    const instructionBox = document.getElementById('instruction-area') as HTMLElement;\n    const confidenceThreshold = 0.66;\n    let children: HTMLElement[] = [];\n    let model: cocoSSD.ObjectDetection | null = null;\n\n    if (getSupportedMedia()) {\n        demoArea.classList.remove('hidden');\n        btn.addEventListener('click', enableCam);\n    } else {\n        console.warn('getUserMedia() is not supported by your browser');\n    }\n\n    function getSupportedMedia() {\n        return !!(navigator.mediaDevices && navigator.mediaDevices.getDisplayMedia);\n    }\n\n    async function enableCam(event: MouseEvent) {\n        const { target } = event;\n        if (target instanceof HTMLElement) {\n            try {\n                model = await cocoSSD.load();\n                target.classList.add('hidden');\n                const constraints = { video: true };\n                navigator.mediaDevices.getUserMedia(constraints).then((stream: MediaStream) => {\n                    video.srcObject = stream;\n                    video.onloadeddata = predictWebCam;\n                });\n                instructionBox.classList.add('hidden');\n            } catch (error) {\n                console.log(error);\n            }\n        }\n    }\n\n    function predictWebCam() {\n        // remove previous bounding boxes\n        if (!model) return;\n\n        model.detect(video).then((predictions: cocoSSD.DetectedObject[]) => {\n            for (let i = 0; i < children.length; i++) {\n                liveView.removeChild(children[i]);\n            }\n            children.splice(0);\n\n            // draw only if prediction has high confidence\n            for (let i = 0; i < predictions.length; i++) {\n                if (predictions[i].score < confidenceThreshold) continue;\n\n                //draw\n                const p = document.createElement('p');\n                p.innerText =\n                    predictions[i].class +\n                    ' - with ' +\n                    Math.round(parseFloat(`${predictions[i].score}`) * 100) +\n                    '% confidence.';\n                p.style =\n                    'margin-left: ' +\n                    predictions[i].bbox[0] +\n                    'px; margin-top: ' +\n                    (predictions[i].bbox[1] - 10) +\n                    'px; width: ' +\n                    (predictions[i].bbox[2] - 10) +\n                    'px; top: 0; left: 0;';\n\n                const highlighter = document.createElement('div');\n                highlighter.setAttribute('class', 'highlighter');\n                highlighter.style =\n                    'left: ' +\n                    predictions[i].bbox[0] +\n                    'px; top: ' +\n                    predictions[i].bbox[1] +\n                    'px; width: ' +\n                    predictions[i].bbox[2] +\n                    'px; height: ' +\n                    predictions[i].bbox[3] +\n                    'px;';\n\n                liveView.appendChild(highlighter);\n                liveView.appendChild(p);\n                children.push(highlighter);\n                children.push(p);\n            }\n            // Call this function again to keep predicting when the browser is ready.\n            window.requestAnimationFrame(predictWebCam);\n        });\n    }\n})();\n"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$g73GA","video","document","getElementById","liveView","demoArea","btn","instructionBox","children","model","enableCam","event","target","HTMLElement","load","classList","add","navigator","mediaDevices","getUserMedia","then","stream","srcObject","onloadeddata","predictWebCam","error","console","log","detect","predictions","i","length","removeChild","splice","score","p","createElement","innerText","class","Math","round","parseFloat","style","bbox","highlighter","setAttribute","appendChild","push","window","requestAnimationFrame","getDisplayMedia","remove","addEventListener","warn"],"version":3,"file":"camera-identify.096fd6e0.js.map"}